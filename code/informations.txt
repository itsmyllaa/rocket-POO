* O que é Programação Orientada a Objetos POO?

- Oriented Object Programming ou OOP
- Um paradigma de desenvolvimento 
- Uma maneira de resolver um problema, um modo de pensar.
- Não está ligado somente à linguagem de programação, mas a um entendimento amplo e atemporal para criação de softwares.

* Utilização no mercado

- Na maioria dos sistemas atuais 
- Várias linguagens (JS, TS, Java, Python...)
- Utilizado por Analistas de Sistemas e não somente por programadores.
    * Na fase de levantamento de requisitos de sistemas
    * Via gráficos, desenhos e textos

* Onde e quando eu vou utilizar?

- Linguagens 
- Quando quiser aplicação de padrões de projetos
- Quando quiser organizar seu código 
- Para melhor entendimento no código, pensando nele como objetos.
- Quando precisar fazer reuso de código
- Para separar a complexidade de código, abstrair código e expor de maneira mais simples.
- Para classificar as rotinas e trechos de código

* Objetos

Todo objeto possui:
 - Propriedades e funcionalidades
 - Estado e comportamento
 - Atributos e métodos

* Objetos abstratos vs Objetos do mundo real

Trazemos a representação de algo do mundo real para objetos
 - Pessoa
 - Aluno
 - Produto
 - Carrinho de compras

Porém, alguns objetos na programação não são fáceis de identificar, pois são abstratos como por exemplo:
 - Autenticação
 - Autorização 

 # Nem todo objeto do mundo real fará parte do seu sistema

* Classes
As classes na orientação a objetos funcionam como um molde para os objetos. Os objetos são criados
a partir de uma classe e muitos deles podem ser feitos da mesma classe.

 - Exemplo: Maquininha de biscoito
  - Instâncias 

* Classes em JavaScript

- Syntactical sugar
- Prototype

* Encapsulamento
Dirigir o carro VS Conhecer o motor do carro

- Colocar numa cápsula
- Agrupamento de funções e variáveis
- Esconder detalhes de implementação
- Camada de segurança para os atributos e métodos

* Encapsulamento no código JavaScript

// Estrutural

let altura = 50
let largura = 60
function calcularArea() {
    return altura * largura
}
let area = calcularArea()

// Orientação a Objetos

class Poligono {
    constructor(altura, largura) {
    this.altura = altura
    this.largura = largura
    }
        get area(){
        return this.#calcularArea
    }
        #calcularArea() 
    {
        return this.altura * this.largura
    }
}

// Criar o objeto
let poligono = new Poligono(50, 60)

* Confusão e Solução 
* Programação Orientada a Objetos VS Programação Estruturada

Programação Estruturada
- Processa a entrada e manipulação dos dados, até a saída.
- Uso de sequências, estruturas de repetição e condições.
- Uso de uma rotina maior, ou sub-rotinas.
- Não existem restrições às variáveis.

Programação Orientada a Objetos
- Surge para trazer um cuidado ao uso estruturado
- Não elimina por completo o uso estruturado
- Conceitos como objetos e classes 
- Cuidado com variáveis e rotinas (encapsulamento)
- Melhor reuso de código (herança)

// estruturado
var valorHora = 50
var tempo Estimado = 20
var desconto = valorHora * tempoEstimado * (10/100)
var custoEstimado = valorHora * tempoEstimado - desconto
console.log(custoEstimado)

// POO
const job = new Job()
job.valorHora = 50 
job.tempoEstimado = 20
job.desconto = 10
const custoEstimado = job.calcularEstimativa()
console.log(custoEstimado)

* Herança
- Pais e filhos
- Objetos podem herdar, ou estender, caracteristicas base.
- Uma cópia de atributos e métodos de outra classe

class Veiculo {
    rodas = 4
    
    mover(direcao){}
    virar(direcao){}
}
class Moto extends Veiculo {
    constructor() {
        super() //puxar atributos e metodos do pai
        this.rodas = 2
    }
}

#Saiba

- Um objeto pode estender de um objeto que pode estender de outro objeto
- Fácil reutilização de código

* Polimorfismo
Quando um objeto estende de outro (herança) talvez haja necessidade de reescrever uma ou mais caracteristicas
(atributos e métodos) nesse novo objeto.

Recriamos então um método (ou mais) da classe herdada.

Polimorfismo significa muitas formas